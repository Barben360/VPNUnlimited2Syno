#!/usr/bin/env python3

import argparse
import tempfile
import os
import subprocess
import shutil
import sys
from datetime import datetime

DEBUG = 1


def __PRINT_DBG__(str):
    if DEBUG:
        print('[DEBUG] {}'.format(str), flush=True)


def __MPRINT__(str):
    print('{}'.format(str), flush=True)


def __PRINT_ERR_AND_EXIT_(str):
    print('[ERROR] {}'.format(str))
    print('Exiting', flush=True)
    sys.exit(1)


SYNO_OPENVPN_DIR = '/usr/syno/etc/synovpnclient/openvpn'

REMOTES = ['at.vpnunlimitedapp.com',
           'au-syd.vpnunlimitedapp.com',
           'be.vpnunlimitedapp.com',
           'bg.vpnunlimitedapp.com',
           'br.vpnunlimitedapp.com',
           'by.vpnunlimitedapp.com',
           'ca.vpnunlimitedapp.com',
           'ca-tr.vpnunlimitedapp.com',
           'ca-vn.vpnunlimitedapp.com',
           'ch.vpnunlimitedapp.com',
           'cl.vpnunlimitedapp.com',
           'cy.vpnunlimitedapp.com',
           'cz.vpnunlimitedapp.com',
           'de-dus.vpnunlimitedapp.com',
           'de.vpnunlimitedapp.com',
           'dk.vpnunlimitedapp.com',
           'ee.vpnunlimitedapp.com',
           'es.vpnunlimitedapp.com',
           'fi.vpnunlimitedapp.com',
           'fr.vpnunlimitedapp.com',
           'fr-sbg.vpnunlimitedapp.com',
           'gr.vpnunlimitedapp.com',
           'hk.vpnunlimitedapp.com',
           'hr.vpnunlimitedapp.com',
           'hu.vpnunlimitedapp.com',
           'ie-dub.vpnunlimitedapp.com',
           'il.vpnunlimitedapp.com',
           'im.vpnunlimitedapp.com',
           'in-ka.vpnunlimitedapp.com',
           'in.vpnunlimitedapp.com',
           'is.vpnunlimitedapp.com',
           'it-mil.vpnunlimitedapp.com',
           'jp.vpnunlimitedapp.com',
           'kr.vpnunlimitedapp.com',
           'lt.vpnunlimitedapp.com',
           'lu.vpnunlimitedapp.com',
           'lv.vpnunlimitedapp.com',
           'md.vpnunlimitedapp.com',
           'mx.vpnunlimitedapp.com',
           'mys.vpnunlimitedapp.com',
           'nl.vpnunlimitedapp.com',
           'no.vpnunlimitedapp.com',
           'nz.vpnunlimitedapp.com',
           'pl.vpnunlimitedapp.com',
           'pt.vpnunlimitedapp.com',
           'ro.vpnunlimitedapp.com',
           'se.vpnunlimitedapp.com',
           'sg.vpnunlimitedapp.com',
           'si.vpnunlimitedapp.com',
           'sk.vpnunlimitedapp.com',
           'th.vpnunlimitedapp.com',
           'tr.vpnunlimitedapp.com',
           'uk-bbc.vpnunlimitedapp.com',
           'uk-cv.vpnunlimitedapp.com',
           'uk.vpnunlimitedapp.com',
           'us-chi.vpnunlimitedapp.com',
           'us-dal.vpnunlimitedapp.com',
           'us-hou.vpnunlimitedapp.com',
           'us-la.vpnunlimitedapp.com',
           'us-lv.vpnunlimitedapp.com',
           'us-mia.vpnunlimitedapp.com',
           'us-netflix.vpnunlimitedapp.com',
           'us-ny.vpnunlimitedapp.com',
           'us.vpnunlimitedapp.com',
           'us-sea.vpnunlimitedapp.com',
           'us-sf.vpnunlimitedapp.com',
           'us-slc.vpnunlimitedapp.com',
           'us-sl.vpnunlimitedapp.com',
           'us-stream.vpnunlimitedapp.com',
           'vn.vpnunlimitedapp.com',
           'za.vpnunlimitedapp.com'
           ]

P2P_REMOTES = ['ca-tr.vpnunlimitedapp.com',
               'fr.vpnunlimitedapp.com',
               'lu.vpnunlimitedapp.com',
               'ro.vpnunlimitedapp.com',
               'us-sf.vpnunlimitedapp.com']

PORT = '1194'

CLIENT_SCRIPT = ['client',
                 'dev tun',
                 'pull',
                 'persist-tun',
                 'persist-key',
                 'ping 5',
                 'ping-exit 30',
                 'nobind',
                 'cipher AES-256-CBC',
                 'auth SHA512',
                 'remote-random',
                 'remote-cert-tls server',
                 'auth-nocache',
                 'route-metric 1',
                 'up /usr/syno/etc.defaults/synovpnclient/scripts/ovpn-up',
                 'route-up /usr/syno/etc.defaults/synovpnclient/scripts/route-up',
                 'comp-lzo no',
                 'script-security 2',
                 'float',
                 'reneg-sec 0',
                 'explicit-exit-notify',
                 'plugin /lib/openvpn/openvpn-down-root.so /usr/syno/etc.defaults/synovpnclient/scripts/ip-down',
                 'remote #REMOTE# #PORT#',
                 'proto udp',
                 'redirect-gateway',
                 'ca ca_#ID#.crt',
                 'key client_key_#ID#.key',
                 'cert client_crt_#ID#.crt']

CONF_SCRIPT_BASE = [
    '[#ID#]',
    'nat=no',
    'redirect-gateway=yes',
    'create_via_conf=yes',
    'pass=',
    'reconnect=yes',
    'conf_name=#CONF_NAME#',
    'user=',
    'remote=#REMOTE#',
    ''
]


def backup(backupPath, clean=False):
    timeStamp = str(datetime.now()).replace(
        "-", "_").replace(" ", "_").replace(":", "_").replace(".", "_")
    backupDirName = 'SYNO_OPENVPN_BACKUP_{}'.format(timeStamp)
    backupDirPath = os.path.join(backupPath, backupDirName)

    shutil.copytree(SYNO_OPENVPN_DIR, backupDirPath)
    __MPRINT__('Configuration successfully backed up in {}'.format(backupDirPath))
    if clean:
        shutil.rmtree(SYNO_OPENVPN_DIR)
        os.mkdir(SYNO_OPENVPN_DIR)
    return


def restore(fullBackupPath):
    if not os.path.isdir(fullBackupPath):
        __PRINT_ERR_AND_EXIT_('Backup directory {} does not exist'.format(fullBackupPath))
    __MPRINT__('Removing all Synology\'s OpenVPN data...')
    shutil.rmtree(SYNO_OPENVPN_DIR)
    __MPRINT__('Restoring backup {}...'.format(fullBackupPath))
    shutil.copytree(fullBackupPath, SYNO_OPENVPN_DIR)
    __MPRINT__('Backup successfully restored')
    return


def extractCertData(srcFile):
    caCertData = []
    clientCertData = []
    clientKeyData = []
    with open(srcFile, 'r') as fileIn:
        currentFile = ''
        for line in fileIn:
            if not currentFile:
                if line.strip() == '<ca>':
                    currentFile = 'caCert'
                elif line.strip() == '<cert>':
                    currentFile = 'clientCert'
                elif line.strip() == '<key>':
                    currentFile = 'clientKey'
            elif currentFile == 'caCert':
                lineStrip = line.strip()
                if lineStrip == '</ca>':
                    currentFile = ''
                else:
                    caCertData.append(lineStrip)
            elif currentFile == 'clientCert':
                lineStrip = line.strip()
                if lineStrip == '</cert>':
                    currentFile = ''
                else:
                    clientCertData.append(lineStrip)
            elif currentFile == 'clientKey':
                lineStrip = line.strip()
                if lineStrip == '</key>':
                    currentFile = ''
                else:
                    clientKeyData.append(lineStrip)
    return caCertData, clientCertData, clientKeyData


def createUsedIDList():
    ovpnConfPath = os.path.join(SYNO_OPENVPN_DIR, 'ovpnclient.conf')
    ret = []
    if not os.path.exists(ovpnConfPath):
        return ret
    with open(ovpnConfPath, 'r') as fileIn:
        for line in fileIn:
            lineStrip = line.strip()
            if len(lineStrip) > 2 and lineStrip[0] == '[' and lineStrip[-1] == ']':
                ret.append(lineStrip[1:-1])
    return ret


def setup(srcFile):
    def formatStr(strIn, id, remote, confName):
        ret = strIn
        ret = ret.replace('#ID#', id)
        ret = ret.replace('#REMOTE#', remote)
        ret = ret.replace('#CONF_NAME#', confName)
        ret = ret.replace('#PORT#', PORT)
        return ret

    if not os.path.exists(srcFile):
        __PRINT_ERR_AND_EXIT_(
            'VPNUnlimited source file {} does not exist'.format(srcFile))
    usedIDs = createUsedIDList()
    idBase = 1
    for remote in REMOTES:
        idAlreadyTaken = True
        while idAlreadyTaken:
            id = 'o{:010}'.format(idBase)
            if id in usedIDs:
                idBase += 1
            else:
                idAlreadyTaken = False
        confName = 'VPNUnlimited_{}'.format(
            remote.split('.')[0].upper().replace('-', '_'))
        if remote in P2P_REMOTES:
            confName = '{}_P2P'.format(confName)
        __MPRINT__('Creating OpenVPN configuration for remote {}'.format(
            remote.split('.')[0]))
        # Writing ovpn file
        __MPRINT__('- Creating OpenVPN file {}'.format('client_{}'.format(id)))
        with open(os.path.join(SYNO_OPENVPN_DIR, 'client_{}'.format(id)), 'w') as fileOut:
            for line in CLIENT_SCRIPT:
                fileOut.write('{}\n'.format(
                    formatStr(line, id, remote, confName)))

        # Writing certificate files
        caCertData, clientCertData, clientKeyData = extractCertData(srcFile)
        __MPRINT__('- Creating CA certificate {}'.format('ca_{}.crt'.format(id)))
        with open(os.path.join(SYNO_OPENVPN_DIR, 'ca_{}.crt'.format(id)), 'w') as fileOut:
            for line in caCertData:
                fileOut.write('{}\n'.format(line))
        __MPRINT__(
            '- Creating client certificate {}'.format('client_crt_{}.crt'.format(id)))
        with open(os.path.join(SYNO_OPENVPN_DIR, 'client_crt_{}.crt'.format(id)), 'w') as fileOut:
            for line in clientCertData:
                fileOut.write('{}\n'.format(line))
        __MPRINT__(
            '- Creating client key {}'.format('client_key_{}.key'.format(id)))
        with open(os.path.join(SYNO_OPENVPN_DIR, 'client_key_{}.key'.format(id)), 'w') as fileOut:
            for line in clientKeyData:
                fileOut.write('{}\n'.format(line))
        __MPRINT__('- Adding configuration to {}'.format('ovpnclient.conf'))
        # Writing configuration file
        ovpnClientConfPath = os.path.join(SYNO_OPENVPN_DIR, 'ovpnclient.conf')
        with open(ovpnClientConfPath, 'a') as fileOut:
            for line in CONF_SCRIPT_BASE:
                fileOut.write('{}\n'.format(
                    formatStr(line, id, remote, confName)))
        idBase += 1
    __MPRINT__('VPNUnlimited OpenVPN was successfully setup')
    return


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='VPNUnlimited OpenVPN configuration for Synology DSM')
    parserCommands = parser.add_subparsers(
        title='commands', dest='command', help='Commands')

    backupCommand = parserCommands.add_parser('backup')
    backupCommand.add_argument(
        'backupsPath', metavar='BACKUPS-PATH', help='Path of the directory where to put the backup ')
    backupCommand.add_argument('--clean', dest='backupClean', action='store_true',
                               help='Remove all Synology OpenVPN configurations')

    restoreCommand = parserCommands.add_parser('restore')
    restoreCommand.add_argument('backupPath', metavar='BACKUP-PATH',
                                help='Path of the configuration directory to restore')

    setupCommand = parserCommands.add_parser('setup')
    setupCommand.add_argument(
        'templateFile', metavar='OVPN-FILE', help='VPN Unlimited template OpenVPN file')

    args = parser.parse_args()

    if not args.command:
        __PRINT_ERR_AND_EXIT_('No command passed. Type --help for usage')

    if args.command == 'backup':
        backup(args.backupsPath, args.backupClean)
    elif args.command == 'restore':
        restore(args.backupPath)
    elif args.command == 'setup':
        setup(args.templateFile)
    else:
        __PRINT_ERR_AND_EXIT_('Unknown command {}'.format(args.command))
